(*

  sql3
  ==========================

  Document the SQL language support in FeatureBase
  
*)

sql3 = statement, [ ";" ] ;

statement = show_tables
      | show_columns
      | show_create_table
      | drop_table
      | create_table_stmt
      | alter_table_stmt
      | select_stmt
      | insert_stmt
      | bulk_insert_stmt
      | delete_stmt ;

(*

  SHOW TABLES
  ----------------
  Shows the tables within a FeatureBase instance.

*)
show_tables = "SHOW", "TABLES" ;

(*

  SHOW COLUMNS
  ----------------
  Shows the columns on a FeatureBase table.

*)
show_columns = "SHOW", "COLUMNS", "FROM", identifier ;

(*

  SHOW CREATE TABLE
  ----------------
  Shows the ddl on a FeatureBase table.

*)
show_create_table = "SHOW", "CREATE", "TABLE", identifier ;

(*

  DROP TABLE
  ----------------
  Drops a FeatureBase table.

*)
drop_table = "DROP", "TABLE", [ "IF", "EXISTS" ], identifier ;


(*

  CREATE TABLE
  ----------------
  Creates a FeatureBase table.

*)
create_table_stmt = "CREATE", "TABLE", [ "IF", "NOT", "EXISTS" ], identifier, "(", column_def, { ",", column_def }, ")", { table_options } ;

column_def = identifier, type_name, { column_constraint } ;

(*

  Column Constraint
  ----------------
  Constraints for a column:

  MIN, MAX - min/max for int types

  TIMEUNIT - 's', 'ms' etc.

  TIMEQUANTUM - 'YMD' etc.

*)
column_constraint =  
        "MIN", integer_literal
      | "MAX", integer_literal
      | "TIMEUNIT", string_literal, [ "EPOCH", date_literal ]
      | "TIMEQUANTUM", string_literal, [ "TTL", string_literal ]
      | "CACHETYPE", ( "RANKED" | "LRU" ), [ "SIZE", integer_literal ] ;

table_options = "KEYPARTITIONS", integer_literal
      | "SHARDWIDTH", integer_literal
      | "COMMENT", string_literal ;

type_name = "INT" 
    | "BOOL"
    | "TIMESTAMP"
    | "DECIMAL"
    | "STRING"
    | "STRINGSET"
    | "ID"
    | "IDSET" ;

(*

  ALTER TABLE
  ----------------
  Alters a FeatureBase table.

*)
alter_table_stmt = "ALTER", "TABLE", ( add_column | drop_column | rename_column ) ;

add_column = "ADD", [ "COLUMN" ], column_def ;

drop_column =  "DROP", [ "COLUMN" ], identifier ;

rename_column = "RENAME", [ "COLUMN" ], identifier, "TO", identifier ;

(*

  INSERT
  ----------------
  Inserts data into a FeatureBase table.

*)
insert_stmt = ( "INSERT" | "REPLACE" ), "INTO", table_name, [ column_list ], "VALUES", value_list, { ",", value_list } ;

(*

  BULK INSERT
  ----------------
  Bulk inserts data into a FeatureBase table.

*)
bulk_insert_stmt = "BULK", ( "INSERT" | "REPLACE" ), "INTO", table_name, [ column_list ], "MAP", map_list, [ "TRANSFORM", value_list ], "FROM", string_literal, "WITH", bulk_insert_options ;

(*

  Examples
  ----------------

Bulk insert from a csv file - assumes that the server has access to the file at that path. `map` clause for csv files is the column index.

  `bulk insert into testtable (_id, i1, 12, d1) map (0, 1, 2, 3) from '/users/foo/bar.csv' with format csv batchsize 1000 rowslimit 10000;`

Source could be an url.

  `bulk insert into testtable (_id, i1, 12, d1) map (0, 1, 2, 3) from 'https://foo.bar.com/bar.csv' with format csv batchsize 1000 rowslimit 10000;`

Pre-batching transformation of values using a values clause - to refer to the new column value from the source we can use `$value`.

  `bulk insert into testtable (_id, i1, i2, d1) map (0, 1, 2, 3) transform ($value, $value + 2, $value, $value) from '/users/foo/bar.csv' with format csv batchsize 1000 rowslimit 10000;`
  
We can support ndjson as a format - in this case the `map` clause contains jsonpath expressions.

  `bulk insert into testtable (_id, i1, 12, d1) map ('$.foo', '$.bar', '$.baz', '$.boo') transform ($value, $value + 2, $value, $value) from '/users/foo/bar.json' with format ndjson batchsize 1000 rowslimit 10000;`
  
Another variant with an inline 'stream' (multi-line string delimiter to be decided).

  `bulk insert into testtable (_id, i1, 12, d1) map ('$.foo', '$.bar', '$.baz', '$.boo') transform ($value, $value + 2, $value, $value) from 
  """
  {"foo": 1000, "bar": 10, "baz": 20, "boo": 3}
  """ 
  with input stream format ndjson batchsize 1000 rowslimit 10000;`

*)

column_list =
  "(", column_name, { ",", column_name }, ")" ;

map_list =
  "(", expr type_name, { ",", expr type_name }, ")" ;

value_list = 
  "(", expr, { ",", expr }, ")" ;

bulk_insert_options = 
  bulk_insert_option, { bulk_insert_option } ;

bulk_insert_option = 
      "BATCHSIZE", integer_literal
    | "ROWSLIMIT", integer_literal
    | "INPUT", string_literal
    | "FORMAT", string_literal
    | "HEADER_ROW" ;

(*

  DELETE
  ----------------
  Deletes data from a FeatureBase table.

*)
delete_stmt = "DELETE" ;

(*

  SELECT
  ----------------
  Queries a FeatureBase table.

*)
select_stmt = "SELECT", [ "DISTINCT" ], [ top_clause ], select_list, [ from_clause ], [ where_clause ], [group_by_clause], [having_clause], [order_by_clause] ;

top_clause = ( "TOP" | "TOPN" ), "(", expr, ")" ;  

select_list = select_item, { ",", select_item } ;

select_item = expr, [ [ "AS" ], column_alias ]
      | "*"
      | qualifier, ".", "*" ;

column_alias = identifier ;

qualifier = identifier ;

from_clause = "FROM", table_or_subquery, { ",", table_or_subquery } ;

table_or_subquery = 
      ( identifier | table_valued_function ), [ [ "AS" ], table_alias ], [ table_option ]
      | "(", select_stmt, ")", [ [ "AS" ], table_alias ] ;

table_alias = identifier ;

table_option = "SHARDS", "(", integer_literal, { ",", integer_literal }, ")";

where_clause = "WHERE", expr ;

group_by_clause = "GROUP", "BY", column_expr, { ",", column_expr };

column_expr = expr ;

having_clause = "HAVING", expr ;

order_by_clause = "ORDER", "BY", order_by_expression, { ",", order_by_expression };

order_by_expression = expr, [ "ASC" | "DESC" ] ;


(*

  Expressions
  ----------------
  
*)
expr = integer_literal
    | string_literal
    | decimal_literal
    | set_literal
    | tuple_literal
    | date_literal
    | [ table_name, "." ], column_name
    | unary_op, expr
    | expr, binary_op, expr
    | function_call
    | "(", expr, ")"
    | "CAST", "(", expr, "AS", type_name, ")"
    | expr, [ "NOT" ], "LIKE", expr
    | expr, "IS", [ "NOT" ], "NULL"
    | expr, [ "NOT" ], "BETWEEN", expr, "AND", expr
    | expr, [ "NOT" ], "IN", "(", ( select_stmt | expr, { ",", expr } ), ")"
    | paren_select_stmt
    | case_expr ;

paren_select_stmt = "(", select_stmt, ")" ;

case_expr = "CASE", [ expr ], { "WHEN", expr, "THEN", expr }, [ "ELSE", expr ], "END" ;

unary_op = "-"
    | "+" 
    | "!" ;

binary_op = "="
    | "!="
    | "<="
    | ">="
    | "&"
    | "|"
    | "<<"
    | ">>"
    | "+"
    | "-"
    | "*"
    | "/" 
    | "%"
    | "||" ;
  
set_literal = "[", expr, { ",", expr }, "]" ;

tuple_literal = "{", expr, { ",", expr }, "}" ;

date_literal = rfc_3339
    | "CURRENT_DATE"
    | "CURRENT_TIMESTAMP" ;

table_name = identifier ;

column_name = identifier ;

function_call = agg_function
    | non_agg_function
    | table_valued_function ;

agg_function = ( "AVG" | "COUNT" | "MAX" | "MIN" | "SUM" ), "(", ( ( [ "DISTINCT" ], expr ) | "*" ), ")"
    | "PERCENTILE", "(", expr, ",", expr, ")" ;

non_agg_function = 
      "SETCONTAINS" , "(", expr, ",", expr, ")" 
    | "SETCONTAINSALL" , "(", expr, ",", expr, ")" 
    | "SETCONTAINSANY" , "(", expr, ",", expr, ")" 
    | "DATEPART" , "(", expr, ",", expr, ")" ;

table_valued_function = 
      "SUBTABLE" , "(", table_name, ".", column_name, ")"; 


identifier = letter , { letter | digit | "_" } ;

letter = "A" | "B" | "C" | "D" | "E" | "F" | "G"
       | "H" | "I" | "J" | "K" | "L" | "M" | "N"
       | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
       | "V" | "W" | "X" | "Y" | "Z" | "a" | "b"
       | "c" | "d" | "e" | "f" | "g" | "h" | "i"
       | "j" | "k" | "l" | "m" | "n" | "o" | "p"
       | "q" | "r" | "s" | "t" | "u" | "v" | "w"
       | "x" | "y" | "z" ;

digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;


